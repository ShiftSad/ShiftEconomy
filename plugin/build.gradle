plugins {
    id 'java'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
    id 'com.gradleup.shadow' version '8.3.3'
}

group = 'codes.shiftmc'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://repo.codemc.org/repository/maven-public/" }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7")

    implementation project(":common")
    implementation("org.mongodb:mongodb-driver-reactivestreams:5.2.0")
    implementation("io.projectreactor:reactor-core:3.6.10")
    implementation("io.lettuce:lettuce-core:6.5.0.RC2")

    implementation("io.r2dbc:r2dbc-spi:1.0.0.RELEASE")
    runtimeOnly('io.asyncer:r2dbc-mysql:1.3.0')
    runtimeOnly('io.r2dbc:r2dbc-h2:1.0.0.RELEASE')

    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")

    implementation("dev.jorel:commandapi-bukkit-shade-mojang-mapped:9.6.0")
}


final var paperVersion = '1.21.1'
final var foliaVersion = '1.20.6'
final var jvmArgsExternal = [
        '-Dcom.mojang.eula.agree=true'
]

def paperPlugins = runPaper.downloadPluginsSpec {
    url("https://github.com/MilkBowl/Vault/releases/download/1.7.3/Vault.jar")
}

def foliaPlugins = runPaper.downloadPluginsSpec {
    url("https://github.com/TheNewEconomy/VaultUnlocked/releases/download/2.3.0/VaultUnlocked-2.3.0.jar")
}

tasks {
    runServer {
        minecraftVersion(paperVersion)
        runDirectory = file("$rootDir/run/paper/$paperVersion")
        jvmArgs = jvmArgsExternal

        downloadPlugins.from(paperPlugins)
    }

    runPaper.folia.registerTask {
        minecraftVersion(foliaVersion)
        runDirectory = file("$rootDir/run/folia/$foliaVersion")
        jvmArgs = jvmArgsExternal

        downloadPlugins.from(foliaPlugins)
    }

    shadowJar {
        archiveClassifier.set("") // Remove all from name
        mergeServiceFiles()
        relocate("dev.jorel.commandapi", "codes.shiftmc.commandapi")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}
